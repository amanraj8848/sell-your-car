// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cars Car[]
  savedCars Car[] @relation("SavedCars")
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
model Car {
  id        String   @id @default(cuid())
  name      String
  brand     String
  type      CarType
  year      Int
  mileage   Int 
  colors    String[]
  price     Float
  description String
  images    String[]

  userId    String   @relation(fields: [id], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isSold  Boolean @default(false)
  features String[]
  location String
  fuelType FuelType?
  transmission Transmission?
  savedBy User[] @relation("SavedCars")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
enum CarType{
  Sedan
  Coupe
  Hatchback
  Convertible
  SUV
  Coupe
  PickUp
  Sports
  Coupe
  Van
}